/*
  Arduino Project - 0-100 PSI Pressure Transducer Analog to Digital Gauge Display

  Description:
  This Arduino code reads analog values from three pressure sensors 
  (oil, fuel, and a placeholder) and displays them on an OLED screen. 
  It also prints these values to the serial monitor. The OLED display 
  includes gauge representations for each pressure type. The code uses 
  the U8g2 library for OLED control and maps pressure values for dynamic 
  visualization.  This code is currently a work in progress, there may 
  be some errors or glitches.

  For support or questions, feel free to contact me:

  Author: JackJohns0n
  Email: jackjohnsonmods@gmail.com
  GitHub: https://github.com/jackjohns0n
*/

#include "U8glib.h"

const int SCK_PIN = 52;
const int SDA_PIN = 51;
const int CS_PIN = 50;
const int DC_PIN = 53;

 U8GLIB_SSD1309_128X64 u8g(SCK_PIN, SDA_PIN, CS_PIN, DC_PIN);

// Declare constants and variables

// 'Gauge_Screen_Preview', 128x64px
const unsigned char epd_bitmap_Gauge_Screen_Preview [] PROGMEM = {
	0x00, 0x01, 0xcf, 0x00, 0x12, 0xf0, 0x00, 0xef, 0x00, 0x0c, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x29, 0x00, 0x12, 0x90, 0x01, 0x09, 0x00, 0x12, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x49, 0x00, 0x1e, 0x90, 0x01, 0xc9, 0x00, 0x0c, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x89, 0x00, 0x02, 0x90, 0x01, 0x29, 0x00, 0x12, 0x90, 0x00, 0x00, 0xc0, 0x3c, 0x00, 
	0x00, 0x01, 0x09, 0x00, 0x02, 0x90, 0x01, 0x29, 0x00, 0x12, 0x90, 0x00, 0x01, 0x2a, 0x25, 0xe8, 
	0x00, 0x01, 0xef, 0x00, 0x02, 0xf0, 0x00, 0xcf, 0x00, 0x0c, 0xf0, 0x00, 0x01, 0x22, 0x3d, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x2a, 0x21, 0xe8, 
	0x00, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x01, 0x2a, 0x20, 0x28, 
	0x00, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xca, 0x21, 0xe8, 
	0x00, 0x40, 0x10, 0x04, 0x01, 0x00, 0x40, 0x10, 0x04, 0x01, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 
	0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 
	0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 
	0x95, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x10, 0x00, 0x00, 0x00, 
	0xaa, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x10, 0x05, 0xef, 0x00, 
	0x95, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x10, 0x05, 0x29, 0x00, 
	0xaa, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x10, 0x05, 0x29, 0x00, 
	0x95, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x10, 0x05, 0x29, 0x00, 
	0xaa, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x10, 0x05, 0x29, 0x00, 
	0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x05, 0xef, 0x00, 
	0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x01, 0xcf, 0x00, 0x12, 0xf0, 0x00, 0xef, 0x00, 0x0c, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x29, 0x00, 0x12, 0x90, 0x01, 0x09, 0x00, 0x12, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x49, 0x00, 0x1e, 0x90, 0x01, 0xc9, 0x00, 0x0c, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x89, 0x00, 0x02, 0x90, 0x01, 0x29, 0x00, 0x12, 0x90, 0x01, 0xe0, 0x00, 0x3c, 0x00, 
	0x00, 0x01, 0x09, 0x00, 0x02, 0x90, 0x01, 0x29, 0x00, 0x12, 0x90, 0x01, 0x09, 0x7a, 0x25, 0xe8, 
	0x00, 0x01, 0xef, 0x00, 0x02, 0xf0, 0x00, 0xcf, 0x00, 0x0c, 0xf0, 0x01, 0xe9, 0x4a, 0x3d, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x09, 0x7a, 0x21, 0xe8, 
	0x00, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x10, 0x00, 0x01, 0x00, 0x01, 0x09, 0x42, 0x20, 0x28, 
	0x00, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x10, 0x00, 0x01, 0x00, 0x01, 0x06, 0x7a, 0x21, 0xe8, 
	0x00, 0x40, 0x10, 0x04, 0x01, 0x00, 0x40, 0x10, 0x04, 0x01, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 
	0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 
	0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 
	0x95, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x10, 0x00, 0x00, 0x00, 
	0xaa, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x10, 0x05, 0xef, 0x00, 
	0x95, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x10, 0x05, 0x29, 0x00, 
	0xaa, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x10, 0x05, 0x29, 0x00, 
	0x95, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x10, 0x05, 0x29, 0x00, 
	0xaa, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x10, 0x05, 0x29, 0x00, 
	0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x05, 0xef, 0x00, 
	0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x01, 0xcf, 0x00, 0x12, 0xf0, 0x00, 0xef, 0x00, 0x0c, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x29, 0x00, 0x12, 0x90, 0x01, 0x09, 0x00, 0x12, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x49, 0x00, 0x1e, 0x90, 0x01, 0xc9, 0x00, 0x0c, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x89, 0x00, 0x02, 0x90, 0x01, 0x29, 0x00, 0x12, 0x90, 0x00, 0x00, 0xc0, 0x3c, 0x00, 
	0x00, 0x01, 0x09, 0x00, 0x02, 0x90, 0x01, 0x29, 0x00, 0x12, 0x90, 0x00, 0x01, 0x2a, 0x25, 0xe8, 
	0x00, 0x01, 0xef, 0x00, 0x02, 0xf0, 0x00, 0xcf, 0x00, 0x0c, 0xf0, 0x00, 0x01, 0x22, 0x3d, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x2a, 0x21, 0xe8, 
	0x00, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x01, 0x2a, 0x20, 0x28, 
	0x00, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xca, 0x21, 0xe8, 
	0x00, 0x40, 0x10, 0x04, 0x01, 0x00, 0x40, 0x10, 0x04, 0x01, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 
	0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 
	0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 
	0x95, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x10, 0x00, 0x00, 0x00, 
	0xaa, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x10, 0x05, 0xef, 0x00, 
	0x95, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x10, 0x05, 0x29, 0x00, 
	0xaa, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x10, 0x05, 0x29, 0x00, 
	0x95, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x10, 0x05, 0x29, 0x00, 
	0xaa, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x10, 0x05, 0x29, 0x00, 
	0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x05, 0xef, 0x00, 
	0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00
};

// 'Gauge_Background', 128x64px
const unsigned char epd_bitmap_Gauge_Background [] PROGMEM = {
	0x00, 0x01, 0xcf, 0x00, 0x12, 0xf0, 0x00, 0xef, 0x00, 0x0c, 0xf0, 0x00, 0x00, 0xc0, 0x3c, 0x00, 
	0x00, 0x00, 0x29, 0x00, 0x12, 0x90, 0x01, 0x09, 0x00, 0x12, 0x90, 0x00, 0x01, 0x2a, 0x25, 0xe8, 
	0x00, 0x00, 0x49, 0x00, 0x1e, 0x90, 0x01, 0xc9, 0x00, 0x0c, 0x90, 0x00, 0x01, 0x22, 0x3d, 0x00, 
	0x00, 0x00, 0x89, 0x00, 0x02, 0x90, 0x01, 0x29, 0x00, 0x12, 0x90, 0x00, 0x01, 0x2a, 0x21, 0xe8, 
	0x00, 0x01, 0x09, 0x00, 0x02, 0x90, 0x01, 0x29, 0x00, 0x12, 0x90, 0x00, 0x01, 0x2a, 0x20, 0x28, 
	0x00, 0x01, 0xef, 0x00, 0x02, 0xf0, 0x00, 0xcf, 0x00, 0x0c, 0xf0, 0x00, 0x00, 0xca, 0x21, 0xe8, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x40, 0x10, 0x04, 0x01, 0x00, 0x40, 0x10, 0x04, 0x01, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x15, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x2a, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x15, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x2a, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x15, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x2a, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x01, 0xcf, 0x00, 0x12, 0xf0, 0x00, 0xef, 0x00, 0x0c, 0xf0, 0x01, 0xe0, 0x00, 0x3c, 0x00, 
	0x00, 0x00, 0x29, 0x00, 0x12, 0x90, 0x01, 0x09, 0x00, 0x12, 0x90, 0x01, 0x09, 0x7a, 0x25, 0xe8, 
	0x00, 0x00, 0x49, 0x00, 0x1e, 0x90, 0x01, 0xc9, 0x00, 0x0c, 0x90, 0x01, 0xe9, 0x4a, 0x3d, 0x00, 
	0x00, 0x00, 0x89, 0x00, 0x02, 0x90, 0x01, 0x29, 0x00, 0x12, 0x90, 0x01, 0x09, 0x7a, 0x21, 0xe8, 
	0x00, 0x01, 0x09, 0x00, 0x02, 0x90, 0x01, 0x29, 0x00, 0x12, 0x90, 0x01, 0x09, 0x42, 0x20, 0x28, 
	0x00, 0x01, 0xef, 0x00, 0x02, 0xf0, 0x00, 0xcf, 0x00, 0x0c, 0xf0, 0x01, 0x06, 0x7a, 0x21, 0xe8, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x40, 0x10, 0x04, 0x01, 0x00, 0x40, 0x10, 0x04, 0x01, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x01, 0xcf, 0x00, 0x12, 0xf0, 0x00, 0xef, 0x00, 0x0c, 0xf0, 0x00, 0x03, 0xd2, 0x3c, 0x00, 
	0x00, 0x00, 0x29, 0x00, 0x12, 0x90, 0x01, 0x09, 0x00, 0x12, 0x90, 0x00, 0x02, 0x52, 0x25, 0xe8, 
	0x00, 0x00, 0x49, 0x00, 0x1e, 0x90, 0x01, 0xc9, 0x00, 0x0c, 0x90, 0x00, 0x03, 0xde, 0x3d, 0x00, 
	0x00, 0x00, 0x89, 0x00, 0x02, 0x90, 0x01, 0x29, 0x00, 0x12, 0x90, 0x00, 0x02, 0x12, 0x21, 0xe8, 
	0x00, 0x01, 0x09, 0x00, 0x02, 0x90, 0x01, 0x29, 0x00, 0x12, 0x90, 0x00, 0x02, 0x12, 0x20, 0x28, 
	0x00, 0x01, 0xef, 0x00, 0x02, 0xf0, 0x00, 0xcf, 0x00, 0x0c, 0xf0, 0x00, 0x02, 0x12, 0x21, 0xe8, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x40, 0x10, 0x04, 0x01, 0x00, 0x40, 0x10, 0x04, 0x01, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 'gauge', 104x10px
const unsigned char epd_bitmap_gauge [] PROGMEM = {
	0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x80, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x10, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x80, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x10, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xe0
};

// ' digit_0', 8x12px
const unsigned char epd_bitmap__digit_0 [] PROGMEM = {
	0xff, 0xff, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xff, 0xff
};
// ' digit_1', 8x12px
const unsigned char epd_bitmap__digit_1 [] PROGMEM = {
	0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18
};
// ' digit_2', 8x12px
const unsigned char epd_bitmap__digit_2 [] PROGMEM = {
	0xfc, 0xfc, 0x03, 0x03, 0x0c, 0x0c, 0x30, 0x30, 0xc0, 0xc0, 0xff, 0xff
};
// ' digit_4', 8x12px
const unsigned char epd_bitmap__digit_4 [] PROGMEM = {
	0xc3, 0xc3, 0xc3, 0xc3, 0xff, 0xff, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03
};
// ' digit_3', 8x12px
const unsigned char epd_bitmap__digit_3 [] PROGMEM = {
	0xfc, 0xfc, 0x03, 0x03, 0xfc, 0xfc, 0x03, 0x03, 0x03, 0x03, 0xfc, 0xfc
};
// ' digit_6', 8x12px
const unsigned char epd_bitmap__digit_6 [] PROGMEM = {
	0x3f, 0x3f, 0xc0, 0xc0, 0xfc, 0xfc, 0xc3, 0xc3, 0xc3, 0xc3, 0x3c, 0x3c
};
// ' digit_7', 8x12px
const unsigned char epd_bitmap__digit_7 [] PROGMEM = {
	0xff, 0xff, 0x03, 0x03, 0x03, 0x03, 0x0c, 0x0c, 0x30, 0x30, 0xc0, 0xc0
};
// ' digit_8', 8x12px
const unsigned char epd_bitmap__digit_8 [] PROGMEM = {
	0x3c, 0x3c, 0xc3, 0xc3, 0x3c, 0x3c, 0xc3, 0xc3, 0xc3, 0xc3, 0x3c, 0x3c
};
// ' digit_9', 8x12px
const unsigned char epd_bitmap__digit_9 [] PROGMEM = {
	0xff, 0xff, 0xc3, 0xc3, 0xff, 0xff, 0x03, 0x03, 0x03, 0x03, 0xff, 0xff
};
// ' digit+5', 8x12px
const unsigned char epd_bitmap__digit_5 [] PROGMEM = {
	0xff, 0xff, 0xc0, 0xc0, 0xfc, 0xfc, 0x03, 0x03, 0x03, 0x03, 0xfc, 0xfc
};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 320)
const int epd_bitmap_allArray_LEN = 10;
const unsigned char* epd_bitmap_allArray[10] = {
	epd_bitmap__digit_0,
	epd_bitmap__digit_1,
	epd_bitmap__digit_2,
	epd_bitmap__digit_3,
	epd_bitmap__digit_4,
	epd_bitmap__digit_5,
	epd_bitmap__digit_6,
	epd_bitmap__digit_7,
	epd_bitmap__digit_8,
	epd_bitmap__digit_9
};

int oil_psi = 0;
char oil_psi_string[10];
int oil_psi_string_length;
// int fuel_psi = 0;
// char fuel_psi_string[10];
// int fuel_psi_string_length;
// int ph_psi = 0;
// char ph_psi_string[10];
// int ph_psi_string_length;

const int pressureInputOil = A0;            // Select the analog input pin for the oil pressure transducer
// const int pressureInputFuel = A1;           // Select the analog input pin for the fuel pressure transducer
// const int pressureInputPH = A2;             // Select the analog input pin for the pH pressure transducer
const int pressureZero = 102.4;             // Analog reading of pressure transducer at 0 psi
const int pressureMax = 921.6;              // Analog reading of pressure transducer at 100 psi
const int pressuretransducermaxPSI = 100;   // PSI value of transducer being used
const int baudRate = 9600;                  // Constant integer to set the baud rate for serial monitor
const int sensorreadDelay = 250;            // Constant integer to set the sensor read delay in milliseconds

float pressureValueOil = 0;                 // Variable to store the value coming from the pressure transducer
// float pressureValueFuel = 0;                // Variable to store the value coming from the pressure transducer
// float pressureValuePH = 0;                  // Variable to store the value coming from the pressure transducer

void setup() {
  u8g.setFont(u8g_font_tpssb);              // Set Font
  u8g.setColorIndex(1);                     // Set Color White/Blue(?)
  Serial.begin(baudRate);                    // Initializes serial communication at set baud rate bits per second
  pinMode(pressureInputOil, INPUT);          // Sets Pin Mode
  // pinMode(pressureInputFuel, INPUT);         // Sets Pin Mode
  // pinMode(pressureInputPH, INPUT);           // Sets Pin Mode
}

void loop() {
  // Read analog input from pressure sensor for oil and perform pressure conversion
  pressureValueOil = analogRead(pressureInputOil);
  pressureValueOil = ((pressureValueOil - pressureZero) * pressuretransducermaxPSI) / (pressureMax - pressureZero);

  // Read analog input from pressure sensor for fuel and perform pressure conversion
  // pressureValueFuel = analogRead(pressureInputFuel);
  // pressureValueFuel = ((pressureValueFuel - pressureZero) * pressuretransducermaxPSI) / (pressureMax - pressureZero);

  // Read analog input from pressure sensor for ph and perform pressure conversion
  // pressureValuePH = analogRead(pressureInputPH);
  // pressureValuePH = ((pressureValuePH - pressureZero) * pressuretransducermaxPSI) / (pressureMax - pressureZero);

  // Assign oil pressure value to variable
  oil_psi = pressureValueOil;
  // Convert oil pressure to string
  itoa(oil_psi, oil_psi_string, 10);
  // Get length of oil pressure string
  oil_psi_string_length = strlen(oil_psi_string);

  // Assign fuel pressure value to variable
  // fuel_psi = pressureValueFuel;
  // Convert fuel pressure to string
  // itoa(fuel_psi, fuel_psi_string, 10);
  // Get length of fuel pressure string
  // fuel_psi_string_length = strlen(fuel_psi_string);

  // Assign ph pressure value to variable
  // ph_psi = pressureValuePH;
  // // Convert ph pressure to string
  // itoa(ph_psi, ph_psi_string, 10);
  // Get length of ph pressure string
  // ph_psi_string_length = strlen(ph_psi_string);

  u8g.firstPage();
  do {
    // Display each digit of the pressure value using bitmaps
    for (int i = 0; i < oil_psi_string_length; i++) {
      u8g.drawBitmapP((112 - oil_psi_string_length * 4) + 9 * i, 7, 8 / 8, 12, epd_bitmap_allArray[oil_psi_string[i] - 48]);
    }

    // Display each digit of the pressure value using bitmaps
    // for (int i = 0; i < fuel_psi_string_length; i++) {
    //   u8g.drawBitmapP((112 - fuel_psi_string_length * 4) + 9 * i, 29, 8 / 8, 12, epd_bitmap_allArray[fuel_psi_string[i] - 48]);
    // }

    // Display each digit of the pressure value using bitmaps
    // for (int i = 0; i < ph_psi_string_length; i++) {
    //   u8g.drawBitmapP((112 - ph_psi_string_length * 4) + 9 * i, 51, 8 / 8, 12, epd_bitmap_allArray[ph_psi_string[i] - 48]);
    // }

    // Display background and gauge on the OLED screen
    u8g.drawBitmapP(0, 0, 128 / 8, 64, epd_bitmap_Gauge_Background);
    u8g.drawBitmapP(0, 10, 104 / 8, 10, epd_bitmap_gauge);
    u8g.drawBitmapP(0, 32, 104 / 8, 10, epd_bitmap_gauge);
    u8g.drawBitmapP(0, 54, 104 / 8, 10, epd_bitmap_gauge);

    // Display a box representing the pressure level on the gauge
    u8g.drawBox(1, 12, map(oil_psi, 0, 100, 0, 98), 6);
    // u8g.drawBox(1, 34, map(fuel_psi, 0, 100, 0, 98), 6);
    // u8g.drawBox(1, 56, map(ph_psi, 0, 100, 0, 98), 6);

  } while (u8g.nextPage());

  // Serial printing
  Serial.print(pressureValueOil, 1);   // Prints value from the previous line to serial
  Serial.println(" Oil psi");           // Prints label to serial
  // Serial.print(pressureValueFuel, 1);  // Prints value from the previous line to serial
  // Serial.println(" Fuel psi");          // Prints label to serial
  // Serial.print(pressureValuePH, 1);    // Prints value from the previous line to serial
  // Serial.println(" pH psi");            // Prints label to serial
  delay(sensorreadDelay);               // Delay in milliseconds between read values
}
